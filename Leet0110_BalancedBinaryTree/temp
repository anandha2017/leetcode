    public static void main(String[] args) {

        // Empty tree - should be balanced
        assertSolution(new Integer[] { null },
                /* expected */ true);

        // Single node tree - should be balanced
        assertSolution(new Integer[] { 1 },
                /* expected */ true);

        // Two level balanced tree
        assertSolution(new Integer[] { 3, 9, 20 },
                /* expected */ true);

        // Three level balanced tree (example 1)
        assertSolution(new Integer[] { 3, 9, 20, null, null, 15, 7 },
                /* expected */ true);

        // Unbalanced tree with height difference of 2 (example 2)
        assertSolution(new Integer[] { 1, 2, 2, 3, 3, null, null, 4, 4 },
                /* expected */ false);

        // Unbalanced tree - left heavy
        assertSolution(new Integer[] { 1, 2, null, 3 },
                /* expected */ false);

        // Unbalanced tree - right heavy
        assertSolution(new Integer[] { 1, null, 2, null, 3 },
                /* expected */ false);

        // Perfect balanced tree (all levels completely filled)
        assertSolution(new Integer[] { 1, 2, 3, 4, 5, 6, 7 },
                /* expected */ true);

        // Balanced tree with some missing leaves
        assertSolution(new Integer[] { 1, 2, 3, null, 4, null, 5 },
                /* expected */ true);

        // Tree with balanced height but right-leaning
        assertSolution(new Integer[] { 1, null, 2, null, 3, null, 4, null, 5 },
                /* expected */ false);

        // Tree with balanced height but left-leaning
        assertSolution(new Integer[] { 1, 2, null, 3, null, 4, null, 5 },
                /* expected */ false);

        // Balanced tree with max negative values
        assertSolution(new Integer[] { -10000, -10000, -10000 },
                /* expected */ true);

        // Balanced tree with max positive values
        assertSolution(new Integer[] { 10000, 10000, 10000 },
                /* expected */ true);

        // Large balanced tree at the edge of constraints (not all 5000 nodes shown)
        assertSolution(buildBalancedTree(12), // 2^12 - 1 = 4095 nodes (approx)
                /* expected */ true);

        // Large unbalanced tree at the edge of constraints
        assertSolution(buildUnbalancedTree(12), // creates a left-heavy tree with ~4000 nodes
                /* expected */ false);

        // Tree with zigzag pattern that is balanced
        assertSolution(new Integer[] { 1, 2, 3, null, 4, null, 5, null, null, 6 },
                /* expected */ true);

        // Tree that's balanced at the root but has unbalanced subtrees
        assertSolution(new Integer[] { 3, 9, 20, 4, 5, 15, 7, 6, null, null, null, null, null, null, 8 },
                /* expected */ false);

        // LeetCode fail
        assertSolution(new Integer[] { 1, 2, 2, 3, null, null, 3, 4, null, null, 4 },
                /* expected */ false);
    }